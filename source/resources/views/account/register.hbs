<div class="mt-4">
  <form method="POST" action="/account/validation">
    <h3 class="heading">Đăng ký thành viên mới</h3>
      <p class="desc">Cùng mua sắm tại YODY ❤️</p>
      
      <div class="spacer"></div>
      
      <div class="form-group">
        <label for="First_Name" class="form-label">Tên</label>
        <input id="First_Name" name="First_Name" type="text" placeholder="Tên" class="form-control">
        <span class="form-message"></span>
      </div>

      <div class="form-group">
        <label for="Last_Name" class="form-label">Họ</label>
        <input id="Last_Name" name="Last_Name" type="text" placeholder="Họ" class="form-control">
        <span class="form-message"></span>
      </div>
      
      <div class="form-group">
        <label for="email" class="form-label">Email</label>
        <input id="Email" name="Email" type="text" placeholder="Địa chỉ Email" class="form-control">
        <span class="form-message"></span>
      </div>    
      
      <div class="form-group">
        <label for="Password" class="form-label">Mật khẩu</label>
        <input id="Password" name="Password" type="password" placeholder="Nhập mật khẩu" class="form-control">
        <span class="form-message"></span>
      </div>
      
          <div class="form-group">
            <label for="Phone" class="form-label">Số điện thoại</label>
            <input id="Phone" name="Phone" placeholder="Số điện thoại" type="number" class="form-control">
            <span class="form-message"></span>
          </div>

          <div class="form-group">
            <label for="Gender" class="form-label">Giới tính</label>
            <select type="radio" class="form-control" name="Gender" id="Gender">
              <option class="btn-check" name="Gender" id="Nam" value="Nam" autocomplete="off">Nam</option>

              <option class="btn-check" name="Gender" id="Nu" value="Nu" autocomplete="off">Nữ</option>

              <option class="btn-check" name="Gender" id="Khac" value="Khac" autocomplete="off">Khác</option>
            </select>
              

            <span class="form-message"></span>
          </div>

      
          <button class="form-submit">Đăng ký</button>
  </form>
</div>


    {{!-- <script>
                function Validator(options){

              function getParent(element, selector){
                  while(element.parentElement){
                      if(element.parentElement.matches(selector)){
                          return element.parentElement;
                      }
                      element = element.parentElement;
                  }
              }

              var selectorRules = {};

              // Ham thuc hien validate
              function validate(inputElement,rule){
                  var errorMessage;
                  var errorElement = getParent(inputElement, options.formGroupSelector).querySelector(options.errorSelector);  
                  
                  // Lay ra cac rule cua selector
                  var rules = selectorRules[rule.selector];
                      // lap qua tung rule-check
                      for (var i = 0; i < rules.length; i++) {
                          switch (inputElement.type){
                              case 'radio':
                              case 'checkbox':
                                  errorMessage = rules[i](
                                      formElement.querySelector(rule.selector + ':checked')
                                  );
                                  break;
                              default:
                                  errorMessage = rules[i](inputElement.value);
                          }
                          if (errorMessage) break;
                      }

                      if(errorMessage){
                          errorElement.innerText = errorMessage;
                          getParent(inputElement, options.formGroupSelector).classList.add('invalid');
                      }else{
                          errorElement.innerText = '';
                          getParent(inputElement, options.formGroupSelector).classList.remove('invalid');
                      }

                      return ! errorMessage;
              }

              // Lay elment cua form
              var formElement = document.querySelector(options.form);

              if (formElement){

                  // khi submit form
                  formElement.onsubmit = function (e){
                      e.preventDefault ();

                      var isFormValid = true;

                      // Lap qua tung rules va lavidate
                      options.rules.forEach(function (rule) {
                          var inputElement = formElement.querySelector(rule.selector);
                          
                          var isValid = validate(inputElement,rule);
                          if (!isValid){
                              isFormValid = false;
                          }
                      });


                      if(isFormValid) {
                          // submit vs javascript
                          if (typeof options.onSubmit === 'function') {
                              
                              var enableInputs = formElement.querySelectorAll('[name]');

                              var formValues = Array.from(enableInputs).reduce(function(values, input){
                                  
                                  switch(input.type){
                                      case 'radio':
                                          values[input.name] = formElement.querySelector('input[name="' + input.name + '"]:checked').value;
                                          break;
                                      case 'checkbox':
                                          if(!input.matches(':checked')) {
                                              values[input.name] = '';
                                              return values;
                                          }
                                          
                                          if (!Array.isArray(values[input.name])){
                                              values[input.name] = [];
                                          }
                                          values[input.name].push(input.value)
                                          break;
                                      case 'file':
                                          values[input.name] = input.files;
                                          break;
                                      default:
                                          values[input.name] = input.value;
                                  }
                                  
                                  return values;
                              }, {});
                              
                              options.onSubmit(formValues);
                          }
                          // submit voi hanh vi mac dinh
                          else{
                              formElement.submit();
                          }
                      }
                  }

                  // Lap qua moi rule - lang nghe xu kien
                  options.rules.forEach(function (rule) {

                      // Luu rule cho moi input
                      
                      if(Array.isArray(selectorRules[rule.selector])) {
                          selectorRules[rule.selector].push(rule.test);
                      }else{
                          selectorRules[rule.selector] = [rule.test];
                      } 

                      var inputElements = formElement.querySelectorAll(rule.selector);

                      Array.from(inputElements).forEach(function(inputElement){

                          // Xu ly blur khoi input
                          inputElement.onblur = function (){
                              validate(inputElement,rule);
                          }

                          // Xu ly truong hop nhap input
                          inputElement.oninput = function(){
                              var errorElement = getParent(inputElement, options.formGroupSelector).querySelector(options.errorSelector);
                              errorElement.innerText = '';
                              getParent(inputElement, options.formGroupSelector).classList.remove('invalid');
                          }

                      });
                  });
              }

          }

          Validator.isRequired = function (selector, message){
              return{
                  selector: selector,
                  test: function(value){
                      return value ? undefined : message || 'Vui lòng nhập trường này'
                  }
              };
          }

          Validator.isEmail = function (selector, message){
              return{
                  selector: selector,
                  test: function(value){
                      var regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
                      return regex.test(value) ? undefined : message || 'Vui lòng nhập Email';
                  }
              };
          }

          Validator.minLength = function (selector, min, message){
              return{
                  selector: selector,
                  test: function(value){
                      return value.length >= min ? undefined : message || `Vui lòng nhập tối thiểu ${min} kí tự`;
                  }
              };
          }

          Validator.isConfirmed = function (selector, getConfirmValue, message){
              return {
                  selector: selector,
                  test: function(value){
                      return value === getConfirmValue() ? undefined : message || 'Vui lòng nhập lại'

                  }
              }
          }
    </script> --}}
    {{!-- <script>
      Validator({
        form: '#form-1',
        formGroupSelector: '.form-group',
        errorSelector: '.form-message',
        rules: [
          Validator.isRequired('#First_Name', 'Vui lòng nhập tên của bạn'),
          Validator.isRequired('#Last_Name', 'Vui lòng nhập họ của bạn'),
          Validator.isEmail('#Email'),
          Validator.minLength('#Password',6),
          Validator.isRequired('#Password_Confirmation'),
          Validator.isRequired('input[name="gender"]'),
          //Validator.isRequired('#provice'),
          Validator.isConfirmed('#Password_Confirmation', function(){
            return document.querySelector('#form-1 #Password').value;
          },'Mật khẩu nhập lại không chính xác')
        ],
        onSubmit: function (data){
          const account = new Schema();
          account.save()
            .then(() => res.redirect ('/'))
            .catch(error => {
                ('Error')
            })
          console.log(data)
        }
      })
    </script> --}}